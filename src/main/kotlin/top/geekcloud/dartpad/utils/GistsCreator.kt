package top.geekcloud.dartpad.utils

import com.intellij.openapi.project.Project
import com.intellij.util.SystemProperties
import io.ktor.client.*
import io.ktor.client.call.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.*
import io.ktor.client.plugins.contentnegotiation.*
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import kotlinx.serialization.json.*
import top.geekcloud.dartpad.MyBundle
import top.geekcloud.dartpad.ui.GistsKeyDialog
import java.io.File

fun Collection<*>.toJsonElement(): JsonElement = JsonArray(mapNotNull { it.toJsonElement() })

fun Map<*, *>.toJsonElement(): JsonElement = JsonObject(
    mapNotNull {
        (it.key as? String ?: return@mapNotNull null) to it.value.toJsonElement()
    }.toMap(),
)

fun Any?.toJsonElement(): JsonElement = when (this) {
    null -> JsonNull
    is Map<*, *> -> toJsonElement()
    is Collection<*> -> toJsonElement()
    else -> JsonPrimitive(toString())
}

class TokenNotAvailableException(message: String? = null) : Exception(message) {}
class DartPadGenFailException(message: String? = null) : Exception(message) {}

object GistsCreator {
    private const val personalKeyFileName = ".genDartPadKey.cfg"

    // const val token = "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"

    var token: String? = getPersonKey()

    fun showTokenSetterDialog(project: Project?) {
        try {
            val token = GistsKeyDialog(project)
            token.promptForApiKey()
        } catch (e: java.lang.Exception) {
            log.warn(e)
        } catch (throwable: Throwable) {
            log.warn("Unable to prompt for api key because UI not ready.")
        }
    }

    fun getPersonKey(): String? {
        val file = File(SystemProperties.getUserHome() + '/' + personalKeyFileName)
        return if (file.exists()) {
            file.readText()
        } else {
            null
        }
    }

    fun setPersonKey(token: String) {
        try {
            this.token = token
            val file = File(SystemProperties.getUserHome() + '/' + personalKeyFileName)
            file.writeText(token)
        } catch (e: Exception) {
            log.error(e.message)
        }
    }

    private val client = HttpClient(CIO) {
        install(ContentNegotiation) {
            json()
        }
        defaultRequest {
            url("https://api.github.com")
            headers {
                contentType(ContentType.Application.Json)
                append("Accept", "application/vnd.github.v3+json")
                append("Authorization", "token $token")
            }
        }
    }

    @Throws(TokenNotAvailableException::class, DartPadGenFailException::class)
    suspend fun createGists(
        fileName: String,
        content: String,
        public: Boolean = true,
        description: String = "Generated by ${MyBundle.message("displayTitle")}"
    ): String {
        if (token == null || token!!.isBlank()) throw TokenNotAvailableException("Token 未设置正确")

        val response: HttpResponse = client.post("/gists") {
            setBody(
                mapOf(
                    "description" to description,
                    "public" to public,
                    "files" to mapOf(
                        fileName to mapOf(
                            "content" to content
                        )
                    ),
                ).toJsonElement()
            )
        }

        if (response.status != HttpStatusCode.Created) {
            throw DartPadGenFailException("${response.status}\n${response.body<JsonElement>()}")
        }

        log.warn("${response.status}")
        val data = response.body<JsonElement>()
        return data.jsonObject["id"].toString().replace("\"", "")
    }
}